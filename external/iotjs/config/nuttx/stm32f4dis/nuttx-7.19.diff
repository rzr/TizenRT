diff --git a/net/socket/getsockname.c b/net/socket/getsockname.c
index 7bf87c2..79fb7d7 100644
--- a/net/socket/getsockname.c
+++ b/net/socket/getsockname.c
@@ -151,10 +151,29 @@ int ipv4_getsockname(FAR struct socket *psock, FAR struct sockaddr *addr,
    * a single network device and only the network device knows the IP address.
    */

+  if (lipaddr == 0)
+    {
+#if defined(CONFIG_NET_TCP) || defined(CONFIG_NET_UDP)
+       outaddr->sin_family = AF_INET;
+       outaddr->sin_addr.s_addr = 0;
+       *addrlen = sizeof(struct sockaddr_in);
+#endif
+
+      return OK;
+    }
+
   net_lock();

 #ifdef CONFIG_NETDEV_MULTINIC
-  /* Find the device matching the IPv4 address in the connection structure */
+  /* Find the device matching the IPv4 address in the connection structure.
+   * NOTE: listening sockets have no ripaddr.  Work around is to use the
+   * lipaddr when ripaddr is not available.
+   */
+
+  if (ripaddr == 0)
+    {
+      ripaddr = lipaddr;
+    }

   dev = netdev_findby_ipv4addr(lipaddr, ripaddr);
 #else
@@ -274,10 +293,29 @@ int ipv6_getsockname(FAR struct socket *psock, FAR struct sockaddr *addr,
    * a single network device and only the network device knows the IP address.
    */

+  if (net_ipv6addr_cmp(lipaddr, g_ipv6_allzeroaddr))
+    {
+#if defined(NET_TCP_HAVE_STACK) || defined(NET_UDP_HAVE_STACK)
+      outaddr->sin6_family = AF_INET6;
+      memcpy(outaddr->sin6_addr.in6_u.u6_addr8, g_ipv6_allzeroaddr, 16);
+      *addrlen = sizeof(struct sockaddr_in6);
+#endif
+
+      return OK;
+    }
+
   net_lock();

 #ifdef CONFIG_NETDEV_MULTINIC
-  /* Find the device matching the IPv6 address in the connection structure */
+  /* Find the device matching the IPv6 address in the connection structure.
+   * NOTE: listening sockets have no ripaddr.  Work around is to use the
+   * lipaddr when ripaddr is not available.
+   */
+
+  if (net_ipv6addr_cmp(ripaddr, g_ipv6_allzeroaddr))
+    {
+      ripaddr = lipaddr;
+    }

   dev = netdev_findby_ipv6addr(*lipaddr, *ripaddr);
 #else
diff --git a/net/socket/listen.c b/net/socket/listen.c
index 0d91ccb..4409a0e 100644
--- a/net/socket/listen.c
+++ b/net/socket/listen.c
@@ -142,7 +142,12 @@ int psock_listen(FAR struct socket *psock, int backlog)
        * accept() is called and enables poll()/select() logic.
        */

-      tcp_listen(conn);
+      errcode = tcp_listen(conn);
+      if (errcode < 0)
+        {
+          errcode = -errcode;
+          goto errout;
+        }
     }
 #endif /* CONFIG_NET_TCP */

