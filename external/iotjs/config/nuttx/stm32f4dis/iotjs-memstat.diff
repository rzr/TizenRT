diff --git a/src/iotjs_util.c b/src/iotjs_util.c
index 62ca214..dd6a978 100644
--- a/src/iotjs_util.c
+++ b/src/iotjs_util.c
@@ -58,8 +58,18 @@ iotjs_string_t iotjs_file_read(const char* path) {
 }


+#define SIZEOF_MM_ALLOCNODE 8
+extern void jmem_heap_stat_alloc(size_t size);
+extern void jmem_heap_stat_free(size_t size);
+
+
 char* iotjs_buffer_allocate(size_t size) {
   char* buffer = (char*)(calloc(size, sizeof(char)));
+
+  size_t new_size;
+  memcpy(&new_size, (buffer - SIZEOF_MM_ALLOCNODE), sizeof(size_t));
+  jmem_heap_stat_alloc(new_size - SIZEOF_MM_ALLOCNODE);
+
   IOTJS_ASSERT(buffer != NULL);
   return buffer;
 }
@@ -67,11 +77,26 @@ char* iotjs_buffer_allocate(size_t size) {

 char* iotjs_buffer_reallocate(char* buffer, size_t size) {
   IOTJS_ASSERT(buffer != NULL);
-  return (char*)(realloc(buffer, size));
+
+  size_t old_size;
+  memcpy(&old_size, (buffer - SIZEOF_MM_ALLOCNODE), sizeof(size_t));
+  jmem_heap_stat_free(old_size - SIZEOF_MM_ALLOCNODE);
+
+  char* ptr = (char*)(realloc(buffer, size));
+
+  size_t new_size;
+  memcpy(&new_size, (ptr - SIZEOF_MM_ALLOCNODE), sizeof(size_t));
+  jmem_heap_stat_alloc(new_size - SIZEOF_MM_ALLOCNODE);
+
+  return ptr;
 }


 void iotjs_buffer_release(char* buffer) {
+  size_t size;
+  memcpy(&size, (buffer - SIZEOF_MM_ALLOCNODE), sizeof(size_t));
+  jmem_heap_stat_free(size - SIZEOF_MM_ALLOCNODE);
+
   IOTJS_ASSERT(buffer != NULL);
   free(buffer);
 }
