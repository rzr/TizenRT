diff --git a/src/unix/fs.c b/src/unix/fs.c
index 4281246..cc0d694 100644
--- a/src/unix/fs.c
+++ b/src/unix/fs.c
@@ -98,7 +98,7 @@
     if (cb == NULL) {                                                         \
       req->path = path;                                                       \
     } else {                                                                  \
-      req->path = strdup(path);                                               \
+      req->path = uv__strdup(path);                                           \
       if (req->path == NULL) {                                                \
         uv__req_unregister(loop, req);                                        \
         return -ENOMEM;                                                       \
diff --git a/src/uv-common.c b/src/uv-common.c
index 813e499..04a7f18 100644
--- a/src/uv-common.c
+++ b/src/uv-common.c
@@ -67,7 +67,6 @@ static uv__allocator_t uv__allocator = {
   free,
 };

-#if defined(__APPLE__)
 char* uv__strdup(const char* s) {
   size_t len = strlen(s) + 1;
   char* m = uv__malloc(len);
@@ -75,13 +74,29 @@ char* uv__strdup(const char* s) {
     return NULL;
   return memcpy(m, s, len);
 }
-#endif
+
+#define SIZEOF_MM_ALLOCNODE 8
+extern void jmem_heap_stat_alloc (size_t size);
+extern void jmem_heap_stat_free (size_t size);

 void* uv__malloc(size_t size) {
-  return uv__allocator.local_malloc(size);
+  char* ptr = (char*)uv__allocator.local_malloc(size);
+
+  size_t new_size;
+  memcpy(&new_size, (ptr - SIZEOF_MM_ALLOCNODE), sizeof(size_t));
+  jmem_heap_stat_alloc(new_size - SIZEOF_MM_ALLOCNODE);
+
+  return (void*)ptr;
 }

 void uv__free(void* ptr) {
+  if (ptr == NULL)
+    return;
+
+  size_t size;
+  memcpy(&size, (char*)ptr - SIZEOF_MM_ALLOCNODE, sizeof(size_t));
+  jmem_heap_stat_free(size);
+
   int saved_errno;

   /* Libuv expects that free() does not clobber errno.  The system allocator
@@ -93,11 +108,31 @@ void uv__free(void* ptr) {
 }

 void* uv__calloc(size_t count, size_t size) {
-  return uv__allocator.local_calloc(count, size);
+  char* ptr = (char*)uv__allocator.local_calloc(count, size);
+
+  size_t new_size;
+  memcpy(&new_size, (ptr - SIZEOF_MM_ALLOCNODE), sizeof(size_t));
+  jmem_heap_stat_alloc(new_size - SIZEOF_MM_ALLOCNODE);
+
+  return (void*)ptr;
 }

 void* uv__realloc(void* ptr, size_t size) {
-  return uv__allocator.local_realloc(ptr, size);
+  if (ptr != NULL) {
+    size_t old_size;
+    memcpy(&old_size, (char*)ptr - SIZEOF_MM_ALLOCNODE, sizeof(size_t));
+    jmem_heap_stat_free(old_size - SIZEOF_MM_ALLOCNODE);
+
+    char* new_ptr = (char*)uv__allocator.local_realloc(ptr, size);
+
+    size_t new_size;
+    memcpy(&new_size, (new_ptr - SIZEOF_MM_ALLOCNODE), sizeof(size_t));
+    jmem_heap_stat_alloc(new_size - SIZEOF_MM_ALLOCNODE);
+
+    return (void*)new_ptr;
+  }
+
+  return uv__malloc(size);
 }

 uv_buf_t uv_buf_init(char* base, unsigned int len) {
diff --git a/src/uv-common.h b/src/uv-common.h
index 069b5af..a24de69 100644
--- a/src/uv-common.h
+++ b/src/uv-common.h
@@ -239,9 +239,7 @@ void uv__fs_scandir_cleanup(uv_fs_t* req);

 /* Allocator prototypes */
 void *uv__calloc(size_t count, size_t size);
-#if defined(__APPLE__)
 char *uv__strdup(const char* s);
-#endif
 void* uv__malloc(size_t size);
 void uv__free(void* ptr);
 void* uv__realloc(void* ptr, size_t size);
